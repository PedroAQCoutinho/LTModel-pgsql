--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        2
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        3
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        4
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        5
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        6
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        7
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        8
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        9
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       10
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       11
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       12
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       13
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       14
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       15
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       16
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       17
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       18
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       19
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       20
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       21
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       22
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       23
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       24
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       25
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       26
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       27
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       28
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       29
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       30
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       31
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       32
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       33
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       34
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       35
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       36
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        0
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        1
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       37
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       38
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       39
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
INSERT 0 104282

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       18
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104458

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       23
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104276

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       11
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104367

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       38
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104113

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       30
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104282

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        9
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104221

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       31
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104253

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       21
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104120

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       16
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104213

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       17
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104127

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       15
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104008

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       34
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104221

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       28
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104263

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        2
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104236

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        3
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104210

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       35
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104293

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       10
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104214

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       25
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104128

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        5
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104067

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        4
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104271

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       39
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104331

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       26
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104271

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       36
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104336

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       20
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104244

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       22
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104264

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       14
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 8788
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 8892
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 103952

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        7
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104362

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        6
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104210

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       12
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104182

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       27
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104306

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       13
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104423

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        0
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 8909
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 8869
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 9008
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 104124

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       24
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 8954
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 104227

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        8
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104138

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       33
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 8951
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 104420

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       37
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 8938
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 104169

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       32
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104305

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       29
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 9053
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 8893
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 9053
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 104072

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       19
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 104311

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        1
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 8899
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 9091
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 8872
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 8914
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 8890
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 8892
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 8979
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 8813
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 8932
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 8954
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 8989
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 8880
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 8830
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 8931
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 8885
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
WHERE a.gid = b.gid;
INSERT 0 8933
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 8855
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 8869
INSERT 0 8915
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 8989
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 9169
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
WHERE a.gid = b.gid;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 9062
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
WHERE a.gid = b.gid;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 8967
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 9010
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
WHERE a.gid = b.gid;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 8871
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
WHERE a.gid = b.gid;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 8964
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 8913
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
WHERE a.gid = b.gid;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 8976
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 9086
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
WHERE a.gid = b.gid;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
WHERE a.gid = b.gid;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_gini" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun b
WHERE a.gid = b.gid;
UPDATE 4526908
psql:malhafix_inserting-cdmun-to-result.sql:3: FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:3: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:3: FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:3: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:3: FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:3: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:3: FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:3: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:9: FATAL:  terminating connection due to administrator command
LINE 1: UPDATE lt_model.result_random_gini a
               ^
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:9: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:9: FATAL:  terminating connection due to administrator command
LINE 1: UPDATE lt_model.result_random_gini a
               ^
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:9: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:3: FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:3: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:9: FATAL:  terminating connection due to administrator command
LINE 1: UPDATE lt_model.result_random_gini a
               ^
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:9: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:9: FATAL:  terminating connection due to administrator command
LINE 1: UPDATE lt_model.result_random_gini a
               ^
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:9: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:9: FATAL:  terminating connection due to administrator command
LINE 1: UPDATE lt_model.result_random_gini a
               ^
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:9: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:9: FATAL:  terminating connection due to administrator command
LINE 1: UPDATE lt_model.result_random_gini a
               ^
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:9: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:9: FATAL:  terminating connection due to administrator command
LINE 1: UPDATE lt_model.result_random_gini a
               ^
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:9: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:9: FATAL:  terminating connection due to administrator command
LINE 1: UPDATE lt_model.result_random_gini a
               ^
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:9: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:9: FATAL:  terminating connection due to administrator command
LINE 1: UPDATE lt_model.result_random_gini a
               ^
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:9: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:9: FATAL:  terminating connection due to administrator command
LINE 1: UPDATE lt_model.result_random_gini a
               ^
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:9: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:9: FATAL:  terminating connection due to administrator command
LINE 1: UPDATE lt_model.result_random_gini a
               ^
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:9: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:9: FATAL:  terminating connection due to administrator command
LINE 1: UPDATE lt_model.result_random_gini a
               ^
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:9: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:3: FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:3: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:9: FATAL:  terminating connection due to administrator command
LINE 1: UPDATE lt_model.result_random_gini a
               ^
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:9: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:9: FATAL:  terminating connection due to administrator command
LINE 1: UPDATE lt_model.result_random_gini a
               ^
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:9: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:9: FATAL:  terminating connection due to administrator command
LINE 1: UPDATE lt_model.result_random_gini a
               ^
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:9: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:9: FATAL:  terminating connection due to administrator command
LINE 1: UPDATE lt_model.result_random_gini a
               ^
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:9: connection to server was lost
-------------------------------------------------------
Primary job  terminated normally, but 1 process returned
a non-zero exit code.. Per user-direction, the job has been aborted.
-------------------------------------------------------
psql:malhafix_inserting-cdmun-to-result.sql:9: FATAL:  terminating connection due to administrator command
LINE 1: UPDATE lt_model.result_random_gini a
               ^
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:9: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:9: FATAL:  terminating connection due to administrator command
LINE 1: UPDATE lt_model.result_random_gini a
               ^
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:9: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:9: FATAL:  terminating connection due to administrator command
LINE 1: UPDATE lt_model.result_random_gini a
               ^
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:9: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:3: FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:3: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:3: FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:3: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:3: FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:3: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:9: FATAL:  terminating connection due to administrator command
LINE 1: UPDATE lt_model.result_random_gini a
               ^
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:9: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:3: FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:3: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:9: FATAL:  terminating connection due to administrator command
LINE 1: UPDATE lt_model.result_random_gini a
               ^
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:9: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:3: FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:3: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:3: FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:3: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:3: FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:3: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:9: FATAL:  terminating connection due to administrator command
LINE 1: UPDATE lt_model.result_random_gini a
               ^
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:9: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:9: FATAL:  terminating connection due to administrator command
LINE 1: UPDATE lt_model.result_random_gini a
               ^
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:9: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:9: FATAL:  terminating connection due to administrator command
LINE 1: UPDATE lt_model.result_random_gini a
               ^
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:9: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:3: FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:3: connection to server was lost
psql:malhafix_inserting-cdmun-to-result.sql:9: FATAL:  terminating connection due to administrator command
server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
psql:malhafix_inserting-cdmun-to-result.sql:9: connection to server was lost
--------------------------------------------------------------------------
mpirun detected that one or more processes exited with non-zero status, thus causing
the job to be terminated. The first process to do so was:

  Process name: [[2141,1],0]
  Exit code:    2
--------------------------------------------------------------------------
