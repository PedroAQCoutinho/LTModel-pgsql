--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        2
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        2
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        3
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        3
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        4
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        4
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        5
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        5
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        6
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        6
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        7
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        7
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        8
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        8
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        9
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        9
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       10
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       10
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       11
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       12
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       13
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       14
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       15
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       16
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       17
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       18
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       19
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       20
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       21
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       22
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       23
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       24
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       25
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       26
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       27
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       28
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       29
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       30
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       31
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       32
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       33
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       34
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       35
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        0
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        0
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        1
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        1
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       36
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       37
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       38
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       39
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       11
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       12
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	 num_proc 
----------
       14
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       13
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
	 num_proc 
----------
       17
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
 num_proc 
----------
       16
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
 num_proc 
----------
       15
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       18
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
 num_proc 
----------
       19
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
 num_proc 
----------
       20
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	 num_proc 
----------
       21
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       23
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		
-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       24
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       25
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		
-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       26
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       27
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
	psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
 num_proc 
----------
       22
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
		b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       28
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       29
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       30
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       31
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       32
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       33
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       34
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       36
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       37
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       38
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       35
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
		a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       39
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        2
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        2
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        3
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        3
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        4
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        4
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        5
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        5
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        6
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        6
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        7
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        7
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        8
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        8
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        9
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        9
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       10
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       10
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       11
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       11
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       12
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       12
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       13
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       13
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       14
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       14
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       15
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       15
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       16
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       16
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       17
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       17
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       18
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       18
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       19
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       19
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       20
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       20
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       21
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       21
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       22
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       22
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       23
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       23
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       24
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       24
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       25
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       25
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       26
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       26
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       27
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       27
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       28
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       28
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       29
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       29
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       30
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       30
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       31
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       31
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       32
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       32
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       33
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       33
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       34
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       34
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       35
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       35
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        0
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        0
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        1
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        1
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       36
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
 num_proc 
----------
       37
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
 num_proc 
----------
       38
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       39
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       36
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
UPDATE lt_model.:ltenure a

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
 num_proc 
----------
       37
(1 row)

UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
WHERE a.gid = b.gid;
     FALSE,
     sub.cd_mun
	FROM(
 num_proc 
----------
       38
(1 row)

psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
 num_proc 
----------
       39
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
	     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		     FALSE,
     sub.cd_mun
	FROM(
		SELECT
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
		a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ORDER BY sub.id_imovel, sub.area_muns DESC;
	ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  syntax error at or near "COLUMN"
LINE 2: ADD COLUMN cd_mun INTEGER,
            ^
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
WHERE a.gid = b.gid;
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        2
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        2
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        3
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        3
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        4
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        4
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        5
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        5
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        6
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        6
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        7
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        7
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        8
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        8
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        9
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        9
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       10
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       10
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       11
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       11
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       12
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       12
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       13
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       13
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       14
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       14
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       15
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       15
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       16
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       16
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       17
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       17
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       18
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       18
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       19
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       19
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       20
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       20
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       21
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       21
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       22
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       23
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       24
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       25
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       26
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       27
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       28
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       29
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       30
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       31
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       32
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       33
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       34
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       35
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       36
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        0
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        0
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        1
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        1
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       37
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       38
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       39
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       22
(1 row)

 num_proc 
----------
       23
(1 row)


-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       29
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
 num_proc 
----------
       24
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
 num_proc 
----------
       25
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
 num_proc 
----------
       26
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
 num_proc 
----------
       27
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
 num_proc 
----------
       28
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       35
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       34
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			
-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       33
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       32
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       38
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       31
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			
-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       30
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       37
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:14: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
				b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
	ORDER BY sub.id_imovel, sub.area_muns DESC;
 num_proc 
----------
       36
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
	GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
 num_proc 
----------
       39
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
					b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun.sql:33: ERROR:  syntax error at or near "("
LINE 1: INSERT INTO lt_model. (gid, cd_mun_contain, cd_mun)
                              ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "_cdmun" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  syntax error at or near "."
LINE 5: WHERE a.gid = b.gid;
               ^
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        2
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        3
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        4
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        5
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        6
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        7
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        8
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        9
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       10
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       11
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       12
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       13
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       14
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       15
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       16
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       17
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       18
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       19
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       20
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       21
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       22
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       23
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       24
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       25
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       26
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       27
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       28
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       29
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       30
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       31
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       32
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       33
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       34
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       35
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       36
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        0
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
        1
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       37
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       38
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
--------------------------------------------------------
-- INSERTING THE IBGE CODE FOR EACH RURAL PROPERTY

-- Case when property is totally within one municipality
SELECT :var_proc num_proc;
 num_proc 
----------
       39
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT
    a.gid,
    TRUE,
		b.cd_mun
	FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		ON ST_CoveredBy(a.geom, b.geom)
	WHERE (a.gid % :threads) = :var_proc;
INSERT 0 109536

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       35
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109523

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       38
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109722

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       23
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109653

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       19
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109603

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       16
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109537

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       24
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109492

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       31
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109421

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       27
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109558

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        5
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109827

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       21
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109756

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        7
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109637

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        6
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109608

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        3
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109612

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        1
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109560

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       12
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109637

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       15
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109552

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       29
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109691

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        0
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109675

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       11
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109635

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       32
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109647

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       33
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109642

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       28
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109665

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       13
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109525

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       14
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109457

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       30
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109551

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       18
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109552

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        8
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109703

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       20
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109593

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        9
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109690

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       34
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109661

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       37
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109539

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       36
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109622

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        2
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109624

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
INSERT 0 109381

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       22
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
 num_proc 
----------
       26
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
	     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
	SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
		     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
		ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109488

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
        4
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109644

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       25
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109797

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       39
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109641

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       10
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 109617

-- Case when property is between two or more municipalities
SELECT :var_proc num_proc;
 num_proc 
----------
       17
(1 row)

INSERT INTO lt_model.:ltenure_cdmun (gid, cd_mun_contain, cd_mun)
	SELECT DISTINCT ON (sub.id_imovel)
     sub.id_imovel,
     FALSE,
     sub.cd_mun
	FROM(
		SELECT
			a.gid AS id_imovel,
			b.cd_mun,
     SUM(ST_Area(ST_Intersection(ST_MakeValid(ST_Buffer(a.geom,0.001)),ST_MakeValid(ST_Buffer(b.geom,0.001))))) AS area_muns
		FROM lt_model.:ltenure AS a
	JOIN lt_model.aux_pa_br_municipios_5570 AS b
			ON ST_Intersects(a.geom, b.geom) AND NOT ST_CoveredBy(a.geom, b.geom)
		GROUP BY a.gid,b.cd_mun) AS sub
	WHERE (sub.id_imovel % :threads) = :var_proc
	ORDER BY sub.id_imovel, sub.area_muns DESC;
INSERT 0 10067
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 9953
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10022
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 9930
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10102
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10163
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 9905
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10203
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10079
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10063
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10032
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10201
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 9887
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 9995
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10170
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 9941
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10161
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10050
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10047
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10069
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10080
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10091
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10045
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 9994
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10000
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10297
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10009
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10077
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10093
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 9967
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10030
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10023
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10227
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10013
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10041
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10174
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 9988
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 10044
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 9966
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
INSERT 0 9996
ALTER TABLE lt_model.:ltenure
ADD COLUMN cd_mun INTEGER,
ADD COLUMN cd_mun_contain BOOLEAN;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:3: ERROR:  column "cd_mun" of relation "result_random_v201901" already exists
UPDATE lt_model.:ltenure a
SET cd_mun = b.cd_mun,
cd_mun_contain = b.cd_mun_contain
FROM lt_model.:ltenure_cdmun
WHERE a.gid = b.gid;
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
psql:malhafix_inserting-cdmun-to-result.sql:9: ERROR:  missing FROM-clause entry for table "b"
LINE 5: WHERE a.gid = b.gid;
                      ^
